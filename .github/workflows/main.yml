name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Check if Terminal Server registry path exists before trying to modify
          if (Test-Path 'HKLM:SystemCurrentControlSetControlTerminal Server') {
            Write-Host "Configuring RDP registry settings..."
            Set-ItemProperty -Path 'HKLM:SystemCurrentControlSetControlTerminal Server' -Name "fDenyTSConnections" -Value 0 -Force
            
            if (Test-Path 'HKLM:SystemCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp') {
              Set-ItemProperty -Path 'HKLM:SystemCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
              Set-ItemProperty -Path 'HKLM:SystemCurrentControlSetControlTerminal ServerWinStationsRDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
            }
            
            # Configure firewall
            netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
            netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
            
            # Try to restart Terminal Service if it exists
            try {
              Restart-Service -Name TermService -Force -ErrorAction Stop
              Write-Host "Terminal Service restarted successfully"
            } catch {
              Write-Host "Could not restart Terminal Service: $($_.Exception.Message)"
            }
          } else {
            Write-Host "Terminal Server registry path not found. Attempting to enable RDP via alternative method..."
            # Alternative method using Enable-PSRemoting and firewall
            try {
              Enable-PSRemoting -Force -SkipNetworkProfileCheck
              Set-NetFirewallRule -DisplayName "Remote Desktop*" -Enabled True
              Write-Host "RDP enabled via alternative method"
            } catch {
              Write-Host "Alternative RDP enabling failed: $($_.Exception.Message)"
            }
          }

      - name: Create RDP User with Secure Password
        run: |
          try {
            Add-Type -AssemblyName System.Security
            $charSet = @{
                Upper   = [char[]](65..90)      # A-Z
                Lower   = [char[]](97..122)     # a-z
                Number  = [char[]](48..57)      # 0-9
                Special = ([char[]](33..47) + [char[]](58..64) +
                           [char[]](91..96) + [char[]](123..126)) # Special characters
            }
            $rawPassword = @()
            $rawPassword += $charSet.Upper | Get-Random -Count 4
            $rawPassword += $charSet.Lower | Get-Random -Count 4
            $rawPassword += $charSet.Number | Get-Random -Count 4
            $rawPassword += $charSet.Special | Get-Random -Count 4
            $password = -join ($rawPassword | Sort-Object { Get-Random })
            $securePass = ConvertTo-SecureString $password -AsPlainText -Force
            
            # Remove existing user if exists
            try { Remove-LocalUser -Name "RDP" -ErrorAction SilentlyContinue } catch {}
            
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -ErrorAction Stop
            Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction Stop
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction Stop
            echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
            Write-Host "RDP user created successfully with username: RDP"
            
          } catch {
            Write-Host "Error creating RDP user: $($_.Exception.Message)"
            exit 1
          }

      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:github-actions

      - name: Get Tailscale IP
        run: |
          # Wait a moment for Tailscale to be fully ready
          Start-Sleep -Seconds 10
          
          # Get Tailscale IP using multiple methods
          $tsIP = $null
          $retries = 0
          
          while (-not $tsIP -and $retries -lt 20) {
            try {
              # Method 1: Use tailscale ip command
              $tsIP = & tailscale ip -4 2>$null
              if ($tsIP -and $tsIP.Trim() -ne "") {
                $tsIP = $tsIP.Trim()
                break
              }
              
              # Method 2: Check network adapters for Tailscale interface
              $tailscaleAdapter = Get-NetAdapter | Where-Object { $_.InterfaceDescription -like "*Tailscale*" -or $_.Name -like "*Tailscale*" }
              if ($tailscaleAdapter) {
                $ipConfig = Get-NetIPAddress -InterfaceIndex $tailscaleAdapter.InterfaceIndex -AddressFamily IPv4 -ErrorAction SilentlyContinue
                if ($ipConfig) {
                  $tsIP = $ipConfig.IPAddress
                  break
                }
              }
              
            } catch {
              Write-Host "Attempt $($retries + 1) failed: $($_.Exception.Message)"
            }
            
            Start-Sleep -Seconds 5
            $retries++
            Write-Host "Waiting for Tailscale IP... Retry $retries/20"
          }
          
          if (-not $tsIP) {
            Write-Error "Could not obtain Tailscale IP after 20 retries"
            # Show network information for debugging
            Write-Host "Available network adapters:"
            Get-NetAdapter | Select-Object Name, InterfaceDescription, Status | Format-Table
            Write-Host "IP Addresses:"
            Get-NetIPAddress -AddressFamily IPv4 | Select-Object IPAddress, InterfaceAlias | Format-Table
            exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale IP obtained: $tsIP"

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP connectivity on Tailscale IP: $env:TAILSCALE_IP"
          
          try {
            $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
            if ($testResult.TcpTestSucceeded) {
              Write-Host "‚úÖ RDP port 3389 is accessible via Tailscale!"
            } else {
              Write-Host "‚ö†Ô∏è  RDP port 3389 test failed, but this might be normal on hosted runners"
            }
          } catch {
            Write-Host "RDP connectivity test error: $($_.Exception.Message)"
          }
          
          # Also test if RDP service is running
          $rdpService = Get-Service -Name "TermService" -ErrorAction SilentlyContinue
          if ($rdpService) {
            Write-Host "Terminal Service Status: $($rdpService.Status)"
            if ($rdpService.Status -ne "Running") {
              try {
                Start-Service -Name "TermService" -ErrorAction Stop
                Write-Host "Terminal Service started successfully"
              } catch {
                Write-Host "Could not start Terminal Service: $($_.Exception.Message)"
              }
            }
          }

      - name: Display Connection Information
        run: |
          Write-Host ""
          Write-Host "======================================"
          Write-Host "üéØ RDP CONNECTION DETAILS"
          Write-Host "======================================"
          Write-Host "Server Address: $env:TAILSCALE_IP"
          Write-Host "Port: 3389"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "======================================"
          Write-Host ""
          Write-Host "üìù Instructions:"
          Write-Host "1. Make sure you have Tailscale installed and connected on your local machine"
          Write-Host "2. Use Remote Desktop Connection (mstsc) or any RDP client"
          Write-Host "3. Connect to: $env:TAILSCALE_IP:3389"
          Write-Host "4. Use the credentials shown above"
          Write-Host ""
          Write-Host "‚ö†Ô∏è  Note: If connection fails, this might be due to GitHub hosted runner limitations."
          Write-Host "   Consider using a self-hosted runner for guaranteed RDP access."
          Write-Host ""

      - name: Keep Session Active
        run: |
          $counter = 0
          while ($true) {
            $counter++
            $currentTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
            Write-Host "[$counter] [$currentTime] üîÑ Session Active - Tailscale IP: $env:TAILSCALE_IP"
            
            # Periodic connectivity check
            if ($counter % 4 -eq 0) {  # Every 20 minutes
              try {
                $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
                $status = if ($testResult.TcpTestSucceeded) { "‚úÖ Online" } else { "‚ö†Ô∏è  Limited" }
                Write-Host "RDP Status: $status"
              } catch {
                Write-Host "RDP Status: ‚ùå Error"
              }
            }
            
            Start-Sleep -Seconds 300  # 5 minutes
          }
